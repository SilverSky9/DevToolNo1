pipeline {
    agent any
    tools {
        go 'Go 1.18'
        // dockerTool 'Docker-compose-for-all-student-from-team10'
    }
//     def notifyLINE(status) {
//     def token = "iLlNAnDbIVL5I2vtKuTWqH4fSXFeZH8ZN1BHefnTGxX"
//     def jobName = env.JOB_NAME +' '+env.BRANCH_NAME
//     def buildNo = env.BUILD_NUMBER
      
//     def url = 'https://notify-api.line.me/api/notify'
//     def message = "${jobName} Build #${buildNo} ${status} \r\n"
//     sh "curl ${url} -H 'Authorization: Bearer ${token}' -F 'message=${message}'"
// }
    environment {
        GO114MODULE = 'on'
        CGO_ENABLED = 0 
        GOPATH = "${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_ID}"
        COMPOSE_FILE = "docker-compose.yml"
    }
    stages {
        stage('Pull code') {
            steps {
                    git branch: 'dev', credentialsId: '698862fd-b5af-4c2b-920c-42ed9ab6ceef', url: 'https://github.com/SilverSky9/DevToolNo1.git'
                }
        }
        stage('Download dependencies') {
            steps {
               dir("backend"){
                   sh 'pwd'
                   sh 'go mod tidy'
               }
            }
        }
        stage('Unitest'){
            steps{
                dir("backend"){
                    dir("services"){
                        script {
                        if (!fileExists('reports')) {
                            sh 'mkdir reports'
                        }
                    }
                        sh 'go test pin-services.go pin-services_test.go > reports/unit.txt'
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'reports', reportFiles: 'unit.txt', reportName: 'Unit Test Report', reportTitles: 'Unit Test Report'])

                        sh 'go test pin-services.go pin-services_test.go -cover > reports/coveunit.txt'
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'reports', reportFiles: 'coveunit.txt', reportName: 'Coverage Unit Test Report', reportTitles: 'Coverage Unit Test Report'])

                    }
                }
            }
        }
        stage('Deployment'){
            steps{
                script{
                    def remote = [:]
                    remote.name = "root"
                    remote.host = '159.223.45.216'
                    remote.user = 'root'
                    remote.password = 'xitgmLwmp12q'
                    remote.allowAnyHosts = true
                    // withCredentials([usernamePassword(credentialsId: 'docker-hub-team10', passwordVariable: 'pass', usernameVariable: 'user')]) {
                    //     sshCommand remote: remote, command: "pwd"
                    //     sshCommand remote: remote, command: 'docker login -u $user -p ${pass}'
                    //     sshCommand remote: remote, command: 'docker login'
                    // }
                    sshCommand remote: remote, command: "git clone -b dev https://github.com/SilverSky9/DevToolNo1.git"
                    sshCommand remote: remote, command: "cd DevToolNo1"
                    sshCommand remote: remote, command: "docker-compose -f DevToolNo1/docker-compose-build-backend.yml build"
                    sshCommand remote: remote, command: "docker-compose -f DevToolNo1/docker-compose-deploy-backend.yml down"
                    sshCommand remote: remote, command: "docker-compose -f DevToolNo1/docker-compose-deploy-backend.yml up -d"
                    sshCommand remote: remote, command: "rm -rf DevToolNo1"
                }      
            }
        }
        stage('E2E Testing'){
            steps{
                echo 'Now we skip E2E because we can\'t run docker'
            }
        }
        stage("Build image"){
            steps{
                // dir("backend"){
                //     sh 'docker build -t silversky9/team-10-backend:1.' + BUILD_NUMBER + ' .'
                //     sh 'docker images'
                // }
                echo 'Need docker for build'
            }
        }
        stage("Push image"){
            steps{
                dir("backend"){
                    // sh 'docker image push silversky9/team-10-backend:1.' + BUILD_NUMBER
                    echo 'Need docker for build'

                }
            }
        }
        stage('Auto tagging'){
            steps{
                withCredentials([gitUsernamePassword(credentialsId: '698862fd-b5af-4c2b-920c-42ed9ab6ceef', gitToolName: 'Default')]) {
                    sh 'git tag ' + 'v1.0.' + BUILD_NUMBER + 'b'
                    sh 'git tag'
                    sh 'git push origin ' + 'v1.0.' + BUILD_NUMBER + 'b'
                }
               
            }
        }
        stage('Noti'){
            steps{
                emailext body: 'Please check job Team-10-Backend ', subject: 'Team-10-Backend successful to CI/CD', to: '62070101@it.kmitl.ac.th'
            }
        }
        
    }
    post{
        success{
            withCredentials([string(credentialsId: 'Line-noti-team10', variable: 'token')]) {
                sh "curl https://notify-api.line.me/api/notify -H 'Authorization: Bearer ${token}' -F 'message=Backend #${BUILD_NUMBER} successüéâ'"

            }
            }
        failure{
            withCredentials([string(credentialsId: 'Line-noti-team10', variable: 'token')]) {
                sh "curl https://notify-api.line.me/api/notify -H 'Authorization: Bearer ${token}' -F 'message=Backend #${BUILD_NUMBER} Fail‚ùóÔ∏è'"

            }
            }
    }       
}