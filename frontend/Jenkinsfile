pipeline {
    agent any
    stages {
        stage('Pull code') {
            steps {
                    git branch: 'dev', credentialsId: '698862fd-b5af-4c2b-920c-42ed9ab6ceef', url: 'https://github.com/SilverSky9/DevToolNo1.git'
                }
        }
         stage('Download dependencies') {
            steps {
                dir("frontend") {
                sh "pwd"
                sh 'ls'
                sh 'npm install'
                }
            }
        }
        stage('Component test'){
            steps{
                dir("frontend"){
                      script {
                        if (!fileExists('reports')) {
                            sh 'mkdir reports'
                        }
                    }
                        sh 'npm run test 2> reports/component.txt'
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'reports', reportFiles: 'component.txt', reportName: 'Component Test Report', reportTitles: 'Component Test Report'])

                        sh 'npm run test -- --coverage > reports/covecomponent.txt'
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'reports', reportFiles: 'covecomponent.txt', reportName: 'Coverage Component Test Report', reportTitles: 'Coverage Component Test Report'])
                  
                }
            }
        }
            stage("Build image"){
            steps{
                // dir("frontend"){
                //     sh 'docker build -t silversky9/team-10-frontend:1.' + BUILD_NUMBER + ' .'
                //     sh 'docker images'
                // }
                echo 'Need docker for build'
            }
        }
        stage("Push image"){
            steps{
                // dir("frontend"){
                    // sh 'docker image push silversky9/team-10-frontend:1.' + BUILD_NUMBER
                    echo 'Need docker for build'

                // }
            }
        }
        stage('Deployment') {
            steps {
                script{
                    def remote = [:]
                    remote.name = "root"
                    remote.host = '159.65.12.177'
                    remote.user = 'root'
                    remote.password = 'xitgmLwmp12q'
                    remote.allowAnyHosts = true
                    // withCredentials([usernamePassword(credentialsId: 'docker-hub-team10', passwordVariable: 'pass', usernameVariable: 'user')]) {
                    //     sshCommand remote: remote, command: "pwd"
                    //     sshCommand remote: remote, command: 'docker login -u $user -p ${pass}'
                    //     sshCommand remote: remote, command: 'docker login'
                    // }
                    sshCommand remote: remote, command: "git clone -b dev https://github.com/SilverSky9/DevToolNo1.git"
                    sshCommand remote: remote, command: "docker-compose -f DevToolNo1/docker-compose-build-frontend.yml build"
                    sshCommand remote: remote, command: "docker-compose -f DevToolNo1/docker-compose-deploy-frontend.yml down"
                    sshCommand remote: remote, command: "docker-compose -f DevToolNo1/docker-compose-deploy-frontend.yml up -d"
                    sshCommand remote: remote, command: "rm -rf DevToolNo1"
                }
            }
        }
        stage('Auto tagging'){
            steps{
                withCredentials([gitUsernamePassword(credentialsId: '698862fd-b5af-4c2b-920c-42ed9ab6ceef', gitToolName: 'Default')]) {
                    sh 'git tag ' + 'v1.0.' + BUILD_NUMBER + 'f'
                    sh 'git tag'
                    sh 'git push origin ' + 'v1.0.' + BUILD_NUMBER + 'f'
                }
               
            }
        }
        stage('Noti'){
            steps{
                emailext body: 'Please check job Team-10-Backend ', subject: 'Team-10-Backend successful to CI/CD', to: '62070101@it.kmitl.ac.th'
            }
        }
    }
     post{
        success{
            withCredentials([string(credentialsId: 'Line-noti-team10', variable: 'token')]) {
                sh "curl https://notify-api.line.me/api/notify -H 'Authorization: Bearer ${token}' -F 'message=Frontend #${BUILD_NUMBER} successüéâ'"

            }
            }
        failure{
            withCredentials([string(credentialsId: 'Line-noti-team10', variable: 'token')]) {
                sh "curl https://notify-api.line.me/api/notify -H 'Authorization: Bearer ${token}' -F 'message=Frontend #${BUILD_NUMBER} Fail‚ùóÔ∏è'"

            }
            }
    }       
}
